From 6eb70f780488a290b226e448d64b48cae12c8d38 Mon Sep 17 00:00:00 2001
From: Chih-Hung Hsieh <chh@google.com>
Date: Mon, 19 Sep 2022 15:31:21 -0700
Subject: [PATCH 10/30] avoid "> >" in demangled names

Old clang compiler demangled names use "> >"
but new compilers use ">>".

Bug: 247611526
Test: presubmit
Change-Id: Id1dcbc6a2be59911d25d79cb062dc2b27dc8c7c7
---
 compiler/libart-compiler.map | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/compiler/libart-compiler.map b/compiler/libart-compiler.map
index fb1eefc471..3522d045ba 100644
--- a/compiler/libart-compiler.map
+++ b/compiler/libart-compiler.map
@@ -3,12 +3,11 @@ ART_COMPILER {
 global:
     global:
         extern "C++" {
+            # TODO(b/247611526): replace more long unmangled names with simple glob patterns
             "art::CompiledCode::CodeDelta() const";
             "art::CompiledCode::CodeDelta(art::InstructionSet)";
             "art::CompiledCode::CodePointer(void const*, art::InstructionSet)";
             "art::CompiledMethodStorage::CompiledMethodStorage(int)";
-            "art::CompiledMethodStorage::DumpMemoryUsage(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, bool) const";
-            "art::CompiledMethodStorage::GetThunkCode(art::linker::LinkerPatch const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)";
             "art::CompiledMethodStorage::UniqueVMapTableEntries() const";
             "art::CompiledMethodStorage::~CompiledMethodStorage()";
             "art::Compiler::Create(art::CompilerOptions const&, art::CompiledMethodStorage*, art::Compiler::Kind)";
@@ -16,8 +15,6 @@ global:
             "art::CompilerOptions::GetVerificationResults() const";
             "art::CompilerOptions::IsImageClass(char const*) const";
             "art::CompilerOptions::IsPreloadedClass(char const*) const";
-            "art::CompilerOptions::ParseDumpInitFailures(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)";
-            "art::CompilerOptions::ParseRegisterAllocationStrategy(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)";
             "art::CompilerOptions::ShouldCompileWithClinitCheck(art::ArtMethod*) const";
             "art::CompilerOptions::~CompilerOptions()";
             "art::CreateTrampoline32(art::InstructionSet, art::EntryPointCallingConvention, art::ThreadOffset<(art::PointerSize)4>)";
@@ -28,14 +25,18 @@ global:
             "art::VerificationResults::IsUncompilableMethod(art::MethodReference) const";
             "art::VerificationResults::VerificationResults()";
             "art::VerificationResults::~VerificationResults()";
-            "art::linker::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, art::linker::LinkerPatch::Type)";
-            "art::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, art::Whence const&)";
             "void art::debug::WriteDebugInfo<art::ElfTypes32>(art::ElfBuilder<art::ElfTypes32>*, art::debug::DebugInfo const&)";
             "void art::debug::WriteDebugInfo<art::ElfTypes64>(art::ElfBuilder<art::ElfTypes64>*, art::debug::DebugInfo const&)";
             art::CompiledCode::AlignCode*;
             art::CompiledMethod::*;
+            art::CompiledMethodStorage::DumpMemoryUsage*;
+            art::CompiledMethodStorage::GetThunkCode*;
+            art::CompilerOptions::ParseDumpInitFailures*;
+            art::CompilerOptions::ParseRegisterAllocationStrategy*;
             art::IntrinsicObjects*;
             art::debug::MakeMiniDebugInfo*;
+            art::linker::operator*;
+            art::operator*;
         };
 
         jit_load;
-- 
2.42.0

