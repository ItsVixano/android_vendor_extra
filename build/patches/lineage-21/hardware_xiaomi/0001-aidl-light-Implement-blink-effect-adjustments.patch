From 682a3f0c9549cc8e2cbcc2215dc0d5f3202e61df Mon Sep 17 00:00:00 2001
From: Arian <arian.kulmer@web.de>
Date: Tue, 3 Jan 2023 23:36:28 +0100
Subject: [PATCH] aidl: light: Implement blink effect adjustments

Change-Id: Ibb6f84d5de73657363eb7f979c0f5cc47607d811
---
 aidl/light/LED.cpp                            | 52 ++++++++++++++++++-
 aidl/light/LED.h                              |  5 +-
 aidl/light/Lights.cpp                         |  9 ++--
 aidl/light/Utils.h                            |  1 +
 .../android.hardware.light-service.xiaomi.rc  | 16 ++++++
 5 files changed, 75 insertions(+), 8 deletions(-)

diff --git a/aidl/light/LED.cpp b/aidl/light/LED.cpp
index 75dd72a..11ec15f 100644
--- a/aidl/light/LED.cpp
+++ b/aidl/light/LED.cpp
@@ -8,6 +8,35 @@
 
 #include "Utils.h"
 
+/*
+ * 8 duty percent steps.
+ */
+#define RAMP_STEPS 8
+/*
+ * Each step will stay on for 50ms by default.
+ */
+#define RAMP_STEP_DURATION 50
+
+namespace {
+    /*
+     * Each value represents a duty percent (0 - 100) for the led pwm.
+     */
+    static int32_t BRIGHTNESS_RAMP[RAMP_STEPS] = {0, 12, 25, 37, 50, 72, 85, 100};
+
+    /*
+     * Scale each value of the brightness ramp according to the
+     * brightness of the color.
+     */
+    static std::string getScaledRamp(uint32_t brightness) {
+        std::string ramp, pad;
+        for (auto const& step : BRIGHTNESS_RAMP) {
+            ramp += pad + std::to_string(step * brightness / 0xFF);
+            pad = ",";
+        }
+        return ramp;
+    }
+} // anonymous namespace
+
 namespace aidl {
 namespace android {
 namespace hardware {
@@ -25,8 +54,27 @@ bool LED::exists() {
     return fileWriteable(mBasePath + "brightness");
 }
 
-bool LED::setBreath(uint8_t value) {
-    return writeToFile(mBasePath + (mBreath ? "breath" : "blink"), value);
+bool LED::setBreath(const HwLightState& state, uint32_t brightness) {
+    uint8_t blink = (state.flashOnMs != 0 && state.flashOffMs != 0);
+    if (!mBreath && blink) {
+        /*
+        * If the flashOnMs duration is not long enough to fit ramping up
+        * and down at the default step duration, step duration is modified
+        * to fit.
+        */
+        int32_t stepDuration = RAMP_STEP_DURATION;
+        int32_t pauseHi = state.flashOnMs - (stepDuration * RAMP_STEPS * 2);
+        int32_t pauseLo = state.flashOffMs;
+        if (pauseHi < 0) {
+            stepDuration = state.flashOnMs / (RAMP_STEPS * 2);
+            pauseHi = 0;
+        }
+        writeToFile(mBasePath + "duty_pcts", getScaledRamp(brightness));
+        writeToFile(mBasePath + "pause_lo", pauseLo);
+        writeToFile(mBasePath + "pause_hi", pauseHi);
+        writeToFile(mBasePath + "ramp_step_ms", stepDuration);
+    }
+    return writeToFile(mBasePath + (mBreath ? "breath" : "blink"), blink);
 }
 
 bool LED::setBrightness(uint8_t value) {
diff --git a/aidl/light/LED.h b/aidl/light/LED.h
index 699a804..cd456a1 100644
--- a/aidl/light/LED.h
+++ b/aidl/light/LED.h
@@ -6,8 +6,11 @@
 
 #pragma once
 
+#include <aidl/android/hardware/light/BnLights.h>
 #include <string>
 
+using ::aidl::android::hardware::light::HwLightState;
+
 namespace aidl {
 namespace android {
 namespace hardware {
@@ -18,7 +21,7 @@ public:
     LED(std::string type);
 
     bool exists();
-    bool setBreath(uint8_t value);
+    bool setBreath(const HwLightState& state, uint32_t brightness);
     bool setBrightness(uint8_t value);
 private:
     std::string mBasePath;
diff --git a/aidl/light/Lights.cpp b/aidl/light/Lights.cpp
index 83c6319..3ac4492 100644
--- a/aidl/light/Lights.cpp
+++ b/aidl/light/Lights.cpp
@@ -107,20 +107,19 @@ ndk::ScopedAStatus Lights::getLights(std::vector<HwLight> *_aidl_return) {
 void Lights::setLED(const HwLightState& state) {
     bool rc = true;
     rgb_t color(state.color);
-    uint8_t blink = (state.flashOnMs != 0 && state.flashOffMs != 0);
 
     switch (state.flashMode) {
         case FlashMode::HARDWARE:
         case FlashMode::TIMED:
             if (mWhiteLED) {
-                rc = kLEDs[WHITE].setBreath(blink);
+                rc = kLEDs[WHITE].setBreath(state, color.toBrightness());
             } else {
                 if (!!color.red)
-                    rc &= kLEDs[RED].setBreath(blink);
+                    rc &= kLEDs[RED].setBreath(state, color.red);
                 if (!!color.green)
-                    rc &= kLEDs[GREEN].setBreath(blink);
+                    rc &= kLEDs[GREEN].setBreath(state, color.green);
                 if (!!color.blue)
-                    rc &= kLEDs[BLUE].setBreath(blink);
+                    rc &= kLEDs[BLUE].setBreath(state, color.blue);
             }
             if (rc)
                 break;
diff --git a/aidl/light/Utils.h b/aidl/light/Utils.h
index 7f1dc0c..7e9b6d8 100644
--- a/aidl/light/Utils.h
+++ b/aidl/light/Utils.h
@@ -30,6 +30,7 @@ bool fileWriteable(const std::string& file);
 bool readFromFile(const std::string& file, std::string *content);
 bool readFromFile(const std::string& file, uint32_t *content);
 bool writeToFile(const std::string& file, uint32_t content);
+bool writeToFile(const std::string& file, std::string content);
 
 } // namespace light
 } // namespace hardware
diff --git a/aidl/light/android.hardware.light-service.xiaomi.rc b/aidl/light/android.hardware.light-service.xiaomi.rc
index 3e798c1..eada452 100644
--- a/aidl/light/android.hardware.light-service.xiaomi.rc
+++ b/aidl/light/android.hardware.light-service.xiaomi.rc
@@ -3,22 +3,38 @@ on early-boot
     chown system system /sys/class/leds/red/blink
     chown system system /sys/class/leds/red/breath
     chown system system /sys/class/leds/red/brightness
+    chown system system /sys/class/leds/red/duty_pcts
     chown system system /sys/class/leds/red/max_brightness
+    chown system system /sys/class/leds/red/pause_hi
+    chown system system /sys/class/leds/red/pause_lo
+    chown system system /sys/class/leds/red/ramp_step_ms
 
     chown system system /sys/class/leds/green/blink
     chown system system /sys/class/leds/green/breath
     chown system system /sys/class/leds/green/brightness
+    chown system system /sys/class/leds/green/duty_pcts
     chown system system /sys/class/leds/green/max_brightness
+    chown system system /sys/class/leds/green/pause_hi
+    chown system system /sys/class/leds/green/pause_lo
+    chown system system /sys/class/leds/green/ramp_step_ms
 
     chown system system /sys/class/leds/blue/blink
     chown system system /sys/class/leds/blue/breath
     chown system system /sys/class/leds/blue/brightness
+    chown system system /sys/class/leds/blue/duty_pcts
     chown system system /sys/class/leds/blue/max_brightness
+    chown system system /sys/class/leds/blue/pause_hi
+    chown system system /sys/class/leds/blue/pause_lo
+    chown system system /sys/class/leds/blue/ramp_step_ms
 
     chown system system /sys/class/leds/white/blink
     chown system system /sys/class/leds/white/breath
     chown system system /sys/class/leds/white/brightness
+    chown system system /sys/class/leds/white/duty_pcts
     chown system system /sys/class/leds/white/max_brightness
+    chown system system /sys/class/leds/white/pause_hi
+    chown system system /sys/class/leds/white/pause_lo
+    chown system system /sys/class/leds/white/ramp_step_ms
 
     # Backlight
     chown system system /sys/class/backlight/backlight/brightness
-- 
2.40.1

